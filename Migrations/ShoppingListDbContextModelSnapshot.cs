// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingList.Data;

#nullable disable

namespace ShoppingList.Migrations
{
    [DbContext(typeof(ShoppingListDbContext))]
    partial class ShoppingListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShoppingList.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ShoppingList.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 0,
                            ImageUrl = "https://e7.pngegg.com/pngimages/763/906/png-clipart-water-gun-firearm-toy-weapon-guns-weapon-water-thumbnail.png",
                            Name = "Water Gun",
                            Price = 15m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 0,
                            ImageUrl = "https://e7.pngegg.com/pngimages/562/313/png-clipart-teddy-bear-teddy-bear-thumbnail.png",
                            Name = "Stuffed Bear",
                            Price = 25m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 0,
                            ImageUrl = "https://e7.pngegg.com/pngimages/15/821/png-clipart-model-car-toy-sports-car-red-toy-car-compact-car-other-thumbnail.png",
                            Name = "Toy Car",
                            Price = 25m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 0,
                            ImageUrl = "https://w7.pngwing.com/pngs/475/804/png-transparent-toy-block-graphy-building-building-block-building-rectangle-photography-thumbnail.png",
                            Name = "Building Blocks",
                            Price = 30m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 0,
                            ImageUrl = "https://w7.pngwing.com/pngs/673/523/png-transparent-rosada-dollhouse-toy-candy-house-child-furniture-building.png",
                            Name = "Dollhouse",
                            Price = 40m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 0,
                            ImageUrl = "https://w7.pngwing.com/pngs/270/15/png-transparent-toy-train-toy-block-toy-train-building-blocks-building-transport-train.png",
                            Name = "Toy Train",
                            Price = 35m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 0,
                            ImageUrl = "https://i0.wp.com/www.kalimatstore.com/wp-content/uploads/2022/01/6223006022225-44-Cats-2in1-Puzzle-Set.png?fit=920%2C960&ssl=1",
                            Name = "Puzzle Set",
                            Price = 20m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 0,
                            ImageUrl = "https://mylittleeinstein.com/wp-content/uploads/2020/06/Step2-Fun-with-Friends-Play-Kitchen-with-Realistic-Lights-Sounds.png",
                            Name = "Toy Kitchen",
                            Price = 45m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 0,
                            ImageUrl = "https://e7.pngegg.com/pngimages/747/1003/png-clipart-snare-drum-memory-u0434u043bu044f-u0434u0435u0442u0435u0439-memory-u0434u043bu044f-u0434u0435u0442u0435u0439-drums-toy-retro-toys-photography-retro-pattern.png",
                            Name = "Toy Drum",
                            Price = 30m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 0,
                            ImageUrl = "https://w7.pngwing.com/pngs/738/775/png-transparent-amazon-com-unmanned-aerial-vehicle-technology-memsic-inc-delivery-drone-remote-controlled-aircraft-electronics-company-innovation.png",
                            Name = "Remote-Controlled Drone",
                            Price = 75m
                        });
                });

            modelBuilder.Entity("ShoppingList.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "kmlcn0505@gmail.com",
                            IsAdmin = true,
                            Name = "Kemalcan",
                            Password = "123",
                            Surname = "Ceylan"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ikbal1@gmail.com",
                            IsAdmin = true,
                            Name = "İkbal",
                            Password = "321",
                            Surname = "Yaman"
                        });
                });

            modelBuilder.Entity("ShoppingList.Models.UserShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsShopping")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserShoppingLists", (string)null);
                });

            modelBuilder.Entity("ShoppingList.Models.UserShoppingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("UserShoppingListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserShoppingListId");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("ShoppingList.Models.Product", b =>
                {
                    b.HasOne("ShoppingList.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingList.Models.UserShoppingList", b =>
                {
                    b.HasOne("ShoppingList.Models.UserModel", "User")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoppingList.Models.UserShoppingListItem", b =>
                {
                    b.HasOne("ShoppingList.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingList.Models.UserShoppingList", null)
                        .WithMany("Items")
                        .HasForeignKey("UserShoppingListId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingList.Models.UserModel", b =>
                {
                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("ShoppingList.Models.UserShoppingList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
